name: Deployment
on:
  push:
    branches:
      - master
    paths:
      - 'src'

jobs:
  deploy:
    runs-on: [ubuntu-20.04]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install -r src/requirements.txt
          
      - name: Show GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Download model from registry
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-central-1"
          PULL_REQUEST_ID: ${{ github.event.number }}
          MODEL_ARCHIVE_OUTPUT_PATH: "review_classifier.tar.gz"
          MODEL_AWS_BUCKET: "ml-production-artifacts"
          MODEL_AWS_REGION: "eu-central-1"
          NEPTUNE_API_TOKEN: ${{ secrets.NEPTUNE_API_TOKEN }}
        run: |
          echo $PULL_REQUEST_ID
          python src/download_and_deploy_model.py
          ls

      - name: Invoke endpoint
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-central-1"
        run: |
          export MODEL_ENDPOINT_NAME=$(aws sagemaker list-endpoints | jq -r ".Endpoints[].EndpointName")
          
          aws sagemaker-runtime invoke-endpoint \
            --endpoint-name $MODEL_ENDPOINT_NAME \
            --body "{\"instances\": [\"absolutely the best\"]}" \
            --content-type application/json \
            --accept application/json \
            --cli-binary-format raw-in-base64-out \
            results && cat results

          aws sagemaker-runtime invoke-endpoint \
            --endpoint-name $MODEL_ENDPOINT_NAME \
            --body "{\"instances\": [\"total crap, nightmare and misunderstanding\"]}" \
            --content-type application/json \
            --accept application/json \
            --cli-binary-format raw-in-base64-out \
            results && cat results
